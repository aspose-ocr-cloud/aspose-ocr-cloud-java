/*
 * Aspose OCR Cloud 5.0 API
 * Aspose OCR Cloud 5.0 API
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Aspose.OCR.Cloud.SDK.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Recognition Language
 */
@JsonAdapter(Language.Adapter.class)
public enum Language {
  
  ENGLISH("English"),
  
  GERMAN("German"),
  
  FRENCH("French"),
  
  ITALIAN("Italian"),
  
  SPANISH("Spanish"),
  
  PORTUGUESE("Portuguese"),
  
  POLISH("Polish"),
  
  SLOVENE("Slovene"),
  
  SLOVAK("Slovak"),
  
  NETHERLANDS("Netherlands"),
  
  LITHUANIAN("Lithuanian"),
  
  LATVIAN("Latvian"),
  
  DANISH("Danish"),
  
  NORWEGIAN("Norwegian"),
  
  FINNISH("Finnish"),
  
  SERBIAN("Serbian"),
  
  CROATIAN("Croatian"),
  
  CZECH("Czech"),
  
  SWEDISH("Swedish"),
  
  ESTONIAN("Estonian"),
  
  ROMANIAN("Romanian"),
  
  CHINESE("Chinese"),
  
  RUSSIAN("Russian"),
  
  ARABIC("Arabic"),
  
  HINDI("Hindi"),
  
  UKRAINAN("Ukrainan"),
  
  BENGALI("Bengali"),
  
  TIBETAN("Tibetan"),
  
  THAI("Thai"),
  
  URDU("Urdu"),
  
  TURKISH("Turkish"),
  
  KOREAN("Korean"),
  
  INDONESIAN("Indonesian"),
  
  HEBREW("Hebrew"),
  
  JAVANESE("Javanese"),
  
  GREEK("Greek"),
  
  JAPANESE("Japanese"),
  
  PERSIAN("Persian"),
  
  ALBANIAN("Albanian"),
  
  LATIN("Latin"),
  
  VIETNAMESE("Vietnamese"),
  
  UZBEK("Uzbek"),
  
  GEORGIAN("Georgian"),
  
  BULGARIAN("Bulgarian"),
  
  AZERBAIJANI("Azerbaijani"),
  
  KAZAH("Kazah"),
  
  MACEDONIAN("Macedonian"),
  
  BELORUSSIAN("Belorussian"),
  
  HWT_ENG("HWT_eng");

  private String value;

  Language(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Language fromValue(String value) {
    for (Language b : Language.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Language> {
    @Override
    public void write(final JsonWriter jsonWriter, final Language enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Language read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Language.fromValue(value);
    }
  }
}

