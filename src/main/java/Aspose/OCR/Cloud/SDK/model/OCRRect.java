/*
 * Aspose OCR Cloud 5.0 API
 * Aspose OCR Cloud 5.0 API
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Aspose.OCR.Cloud.SDK.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import Aspose.OCR.Cloud.SDK.JSON;

/**
 * Represents a rectangle: Left-Top (X1-Y1) to Right-Bottom (X2-Y2)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-21T03:16:37.701975700+03:00[GMT+03:00]")
public class OCRRect {
  public static final String SERIALIZED_NAME_TOP_LEFT_X = "topLeftX";
  @SerializedName(SERIALIZED_NAME_TOP_LEFT_X)
  private Integer topLeftX;

  public static final String SERIALIZED_NAME_TOP_LEFT_Y = "topLeftY";
  @SerializedName(SERIALIZED_NAME_TOP_LEFT_Y)
  private Integer topLeftY;

  public static final String SERIALIZED_NAME_BOTTOM_RIGHT_X = "bottomRightX";
  @SerializedName(SERIALIZED_NAME_BOTTOM_RIGHT_X)
  private Integer bottomRightX;

  public static final String SERIALIZED_NAME_BOTTOM_RIGHT_Y = "bottomRightY";
  @SerializedName(SERIALIZED_NAME_BOTTOM_RIGHT_Y)
  private Integer bottomRightY;

  public OCRRect() {
  }

  public OCRRect topLeftX(Integer topLeftX) {
    
    this.topLeftX = topLeftX;
    return this;
  }

   /**
   * X-Coordinate of top left corner
   * @return topLeftX
  **/
  @javax.annotation.Nullable

  public Integer getTopLeftX() {
    return topLeftX;
  }


  public void setTopLeftX(Integer topLeftX) {
    this.topLeftX = topLeftX;
  }


  public OCRRect topLeftY(Integer topLeftY) {
    
    this.topLeftY = topLeftY;
    return this;
  }

   /**
   * Y-Coordinate of top left corner
   * @return topLeftY
  **/
  @javax.annotation.Nullable

  public Integer getTopLeftY() {
    return topLeftY;
  }


  public void setTopLeftY(Integer topLeftY) {
    this.topLeftY = topLeftY;
  }


  public OCRRect bottomRightX(Integer bottomRightX) {
    
    this.bottomRightX = bottomRightX;
    return this;
  }

   /**
   * X-Coordinate of bottom right corner
   * @return bottomRightX
  **/
  @javax.annotation.Nullable

  public Integer getBottomRightX() {
    return bottomRightX;
  }


  public void setBottomRightX(Integer bottomRightX) {
    this.bottomRightX = bottomRightX;
  }


  public OCRRect bottomRightY(Integer bottomRightY) {
    
    this.bottomRightY = bottomRightY;
    return this;
  }

   /**
   * Y-Coordinate of bottom right corner
   * @return bottomRightY
  **/
  @javax.annotation.Nullable

  public Integer getBottomRightY() {
    return bottomRightY;
  }


  public void setBottomRightY(Integer bottomRightY) {
    this.bottomRightY = bottomRightY;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OCRRect ocRRect = (OCRRect) o;
    return Objects.equals(this.topLeftX, ocRRect.topLeftX) &&
        Objects.equals(this.topLeftY, ocRRect.topLeftY) &&
        Objects.equals(this.bottomRightX, ocRRect.bottomRightX) &&
        Objects.equals(this.bottomRightY, ocRRect.bottomRightY);
  }

  @Override
  public int hashCode() {
    return Objects.hash(topLeftX, topLeftY, bottomRightX, bottomRightY);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OCRRect {\n");
    sb.append("    topLeftX: ").append(toIndentedString(topLeftX)).append("\n");
    sb.append("    topLeftY: ").append(toIndentedString(topLeftY)).append("\n");
    sb.append("    bottomRightX: ").append(toIndentedString(bottomRightX)).append("\n");
    sb.append("    bottomRightY: ").append(toIndentedString(bottomRightY)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("topLeftX");
    openapiFields.add("topLeftY");
    openapiFields.add("bottomRightX");
    openapiFields.add("bottomRightY");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OCRRect
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OCRRect.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OCRRect is not found in the empty JSON string", OCRRect.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OCRRect.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OCRRect` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OCRRect.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OCRRect' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OCRRect> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OCRRect.class));

       return (TypeAdapter<T>) new TypeAdapter<OCRRect>() {
           @Override
           public void write(JsonWriter out, OCRRect value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OCRRect read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OCRRect given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OCRRect
  * @throws IOException if the JSON string is invalid with respect to OCRRect
  */
  public static OCRRect fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OCRRect.class);
  }

 /**
  * Convert an instance of OCRRect to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

